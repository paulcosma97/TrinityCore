name: GCC

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Print
          shell: bash
      env:
        SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
        SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
        SERVER_IP_ADDR: ${{ secrets.SERVER_IP_ADDR }}
      run: |
        echo "$SERVER_SSH_USER"@"$SERVER_IP_ADDR"
        echo "$SERVER_SSH_USER@$SERVER_IP_ADDR"
    - name: Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -yq libboost-all-dev sshpass
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - name: Setup
      run: |
        mkdir bin
        cd bin
        cmake ../ -DWITH_WARNINGS=1 -DWITH_COREDEBUG=0 -DUSE_COREPCH=1 -DUSE_SCRIPTPCH=1 -DTOOLS=1 -DSCRIPTS=dynamic -DSERVERS=1 -DNOJEM=0 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="-Werror" -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS_DEBUG="-DNDEBUG" -DCMAKE_CXX_FLAGS_DEBUG="-DNDEBUG" -DCMAKE_INSTALL_PREFIX=check_install -DBUILD_TESTING=1
        cd ..
    - name: Build
      run: |
        cd bin
        make -j 4 -k && make install
    - name: Unit tests
      run: |
        cd bin
        make test
    - name: Check executables
      run: |
        cd bin/check_install/bin
        ./authserver --version
        ./worldserver --version
    - name: Move binaries
      run: |
        mkdir -p output/TrinityCore/TrinityCore/sql
        mkdir -p output/TrinityCore/TrinityCore/bin/check_install
        cp -R bin/check_install/* output/TrinityCore/TrinityCore/bin/check_install
        cp -R sql/* output/TrinityCore/TrinityCore/sql 

    - name: Upload Artifacts
      uses: 'actions/upload-artifact@v2'
      with:
        name: binaries
        path: output
    
    - name: Zip Binaries
      run: |
        sudo apt install zip -y
        zip -r output.zip output/
    
    - name: Transfer Binaries
      shell: bash
      env:
        SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
        SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
        SERVER_IP_ADDR: ${{ secrets.SERVER_IP_ADDR }}
      run: |
        sshpass -p "$SERVER_SSH_KEY" scp ./output.zip "$SERVER_SSH_USER"@"$SERVER_IP_ADDR":~/work
        sshpass -p "$SERVER_SSH_KEY" ssh "$SERVER_SSH_USER"@"$SERVER_IP_ADDR" 'cd ~/work && unzip output.zip && rm output.zip && exit'